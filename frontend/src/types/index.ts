/**
 * types/index.ts - TypeScript Type Definitions for Scrum Poker
 * 
 * This file contains all the TypeScript interfaces, enums, and constants
 * used throughout the Scrum Poker frontend application. It provides type
 * safety and documentation for the data structures used in the app.
 * 
 * Key Categories:
 * 1. User and Room Data Models
 * 2. WebSocket Message Types and Structures
 * 3. Poker Card Value Definitions
 * 
 * These types ensure consistency between the frontend and backend
 * communication and provide excellent developer experience with
 * autocomplete and type checking.
 */

/**
 * User Interface - Represents a participant in a poker room
 * 
 * This interface defines the structure of a user object as it exists
 * in the frontend application. It contains all the information needed
 * to display a user's status and voting information.
 * 
 * Properties:
 * - id: Unique identifier assigned by the backend
 * - name: Display name entered by the user
 * - estimate: The story point estimate (only visible when revealed)
 * - hasVoted: Boolean indicating if the user has submitted an estimate
 */
export interface User {
  /** Unique identifier for the user, generated by the backend */
  id: string;
  
  /** Display name chosen by the user */
  name: string;
  
  /** The user's story point estimate (undefined if not voted or hidden) */
  estimate?: string;
  
  /** Whether the user has submitted an estimate for the current round */
  hasVoted: boolean;
}

/**
 * RoomState Interface - Represents the current state of a poker room
 * 
 * This interface defines the complete state of a poker session as
 * received from the backend. It contains all the information needed
 * to render the room view and manage the estimation session.
 * 
 * Properties:
 * - roomId: Identifier for the poker room
 * - users: Array of all participants in the room
 * - showEstimates: Whether estimates are currently visible to all users
 */
export interface RoomState {
  /** Unique identifier for the poker room */
  roomId: string;
  
  /** Array of all users currently in the poker room */
  users: User[];
  
  /** Whether estimates are currently revealed to all participants */
  showEstimates: boolean;
}

/**
 * MessageType Enum - WebSocket Message Types
 * 
 * This enum defines all the different types of messages that can be
 * sent between the frontend and backend via WebSocket. Each message
 * type corresponds to a specific action or event in the poker session.
 * 
 * Message Flow:
 * - JOIN: User joins a room
 * - VOTE: User submits an estimate
 * - SHOW_ESTIMATES: Reveal all estimates
 * - HIDE_ESTIMATES: Hide all estimates
 * - DELETE_ESTIMATES: Clear all estimates and reset voting
 * - ROOM_UPDATE: Backend sends updated room state
 * - USER_LEFT: User leaves the room (future use)
 */
export enum MessageType {
  /** User requests to join a poker room */
  JOIN = 'JOIN',
  
  /** User submits their story point estimate */
  VOTE = 'VOTE',
  
  /** Request to reveal all user estimates */
  SHOW_ESTIMATES = 'SHOW_ESTIMATES',
  
  /** Request to hide all user estimates */
  HIDE_ESTIMATES = 'HIDE_ESTIMATES',
  
  /** Request to delete all estimates and start fresh */
  DELETE_ESTIMATES = 'DELETE_ESTIMATES',
  
  /** Backend sends updated room state to all clients */
  ROOM_UPDATE = 'ROOM_UPDATE',
  
  /** Notification that a user has left the room */
  USER_LEFT = 'USER_LEFT'
}

/**
 * WebSocketMessage Interface - Structure for WebSocket Communication
 * 
 * This interface defines the standard structure for all messages
 * sent over the WebSocket connection. It provides a consistent
 * format for communication between frontend and backend.
 * 
 * Structure:
 * - type: Identifies what kind of message this is
 * - payload: Contains the actual data for the message
 * 
 * The payload structure varies depending on the message type,
 * but this interface provides the common envelope format.
 */
export interface WebSocketMessage {
  /** The type of message being sent (determines how payload is interpreted) */
  type: MessageType;
  
  /** The actual data payload (structure depends on message type) */
  payload: any;
}

/**
 * FIBONACCI_VALUES - Available Story Point Values
 * 
 * This array contains all the numerical story point values available
 * for selection in the poker game. These values follow a modified
 * Fibonacci sequence, which is commonly used in Agile estimation.
 * 
 * The sequence provides increasing granularity for smaller estimates
 * and larger gaps for bigger estimates, which aligns with the uncertainty
 * that increases with larger work items.
 * 
 * Current Values: 0, 0.5, 1, 2, 3, 5, 8, 13, 20, 40
 * 
 * Note: These values can be modified to customize the available
 * estimation options for different teams or methodologies.
 */
export const FIBONACCI_VALUES = ['0', '0.5', '1', '2', '3', '5', '8', '13', '20', '40'];

/**
 * SPECIAL_VALUES - Non-Numerical Estimation Options
 * 
 * This array contains special cards that provide alternatives to
 * numerical estimates. These are commonly used in Planning Poker
 * to handle edge cases and special situations.
 * 
 * Special Cards:
 * - '?': "I don't know" or "Need more information"
 * - '☕': "This is too big/complex, let's take a break and discuss"
 * 
 * These options allow team members to communicate when they can't
 * provide a numerical estimate due to lack of information or when
 * the story is too large/complex for estimation.
 */
export const SPECIAL_VALUES = ['?', '☕']; 